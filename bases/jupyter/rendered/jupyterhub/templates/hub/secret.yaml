---
# Source: jupyterhub/templates/hub/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: hub
  labels:
    component: hub
    app.kubernetes.io/component: hub
    app: "jupyterhub"
    release: "jupyterhub"
    chart: jupyterhub-4.2.0
    heritage: Helm
    app.kubernetes.io/name: "jupyterhub"
    app.kubernetes.io/instance: "jupyterhub"
    helm.sh/chart: jupyterhub-4.2.0
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  values.yaml: ""

  # Any JupyterHub Services api_tokens are exposed in this k8s Secret as a
  # convinience for external services running in the k8s cluster that could
  # mount them directly from this k8s Secret.

  # During Helm template rendering, these values that can be autogenerated for
  # users are set using the following logic:
  #
  # 1. Use chart configuration's value
  # 2. Use k8s Secret's value
  # 3. Use a new autogenerated value
  #
  # hub.config.ConfigurableHTTPProxy.auth_token: for hub to proxy-api authorization (JupyterHub.proxy_auth_token is deprecated)
  # hub.config.JupyterHub.cookie_secret:         for cookie encryption
  # hub.config.CryptKeeper.keys:                 for auth state encryption
  #
  hub.config.ConfigurableHTTPProxy.auth_token: "Tk9MVnYwVjhLcWVqY25Md01GMUxxYjVuTHdhU2I5MERzaFdMbXRERjB4enU2aWRlbTF1dDZyajFmTlR4M0RNeg=="
  hub.config.JupyterHub.cookie_secret: "YWExNWNlNWM4MTFmZjQyYWE5Y2NhNjMyNWU5N2UxMTFiODE0MWE5OWVlYTIyOTJiN2MzNWUzMTM2M2NkZmNiMQ=="
  hub.config.CryptKeeper.keys: "MjQ2OTZjM2UxNzcwOWU3ZjY2Mzk4MWFhZDQxNGNiZjQwNTIxM2Y1NWJlODMwNmJlMDQ0MDFjMjI1MjU0NWQ3Zg=="
