---
# Source: cockroachdb/templates/job.init.yaml
kind: Job
apiVersion: batch/v1
metadata:
  name: cockroachdb-init
  namespace: "default"
  labels:
    helm.sh/chart: cockroachdb-17.0.1
    app.kubernetes.io/name: cockroachdb
    app.kubernetes.io/instance: "cockroachdb"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: init
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cockroachdb
        app.kubernetes.io/instance: "cockroachdb"
        app.kubernetes.io/component: init
    spec:
      securityContext:
        seccompProfile:
          type: "RuntimeDefault"
        runAsGroup: 1000
        runAsUser: 1000
        fsGroup: 1000
        runAsNonRoot: true
      restartPolicy: OnFailure
      terminationGracePeriodSeconds: 300
      serviceAccountName: cockroachdb
      initContainers:
        - name: copy-certs
          image: "busybox"
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/sh
            - -c
            - "cp -f /certs/* /cockroach-certs/; chmod 0400 /cockroach-certs/*.key"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:  
              drop: ["ALL"]
          volumeMounts:
            - name: client-certs
              mountPath: /cockroach-certs/
            - name: certs-secret
              mountPath: /certs/
      containers:
        - name: cluster-init
          image: "cockroachdb/cockroach:v25.2.1"
          imagePullPolicy: "IfNotPresent"
          # Run the command in an `while true` loop because this Job is bound
          # to come up before the CockroachDB Pods (due to the time needed to
          # get PersistentVolumes attached to Nodes), and sleeping 5 seconds
          # between attempts is much better than letting the Pod fail when
          # the init command does and waiting out Kubernetes' non-configurable
          # exponential back-off for Pod restarts.
          # Command completes either when cluster initialization succeeds,
          # or when cluster has been initialized already.
          command:
          - /bin/bash
          - -c
          - >-
              initCluster() {
                while true; do
                  local output=$(
                    set -x;

                    /cockroach/cockroach init \
                      --certs-dir=/cockroach-certs/ \
                      --host=cockroachdb-0.cockroachdb:26257 \
                  2>&1);

                  local exitCode="$?";
                  echo $output;

                  if [[ "$output" =~ .*"Cluster successfully initialized".* || "$output" =~ .*"cluster has already been initialized".* ]]; then
                    break;
                  fi

                  echo "Cluster is not ready to be initialized, retrying in 5 seconds"
                  sleep 5;
                done
              }

              initCluster;
          env:
          volumeMounts:
            - name: client-certs
              mountPath: /cockroach-certs/
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:  
              drop: ["ALL"]
      volumes:
        - name: client-certs
          emptyDir: {}
        - name: certs-secret
          projected:
            sources:
            - secret:
                name: cockroachdb-client-secret
                items:
                - key: ca.crt
                  path: ca.crt
                  mode: 0400
                - key: tls.crt
                  path: client.root.crt
                  mode: 0400
                - key: tls.key
                  path: client.root.key
                  mode: 0400
